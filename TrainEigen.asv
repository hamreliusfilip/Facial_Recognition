
function [] = TrainEigen()

% Parameters
commonSize = [400, 400];
imageFolderPath = 'DB1';

% Load images and compute mean face
imageFiles = dir(fullfile(imageFolderPath, '*.jpg'));

% Get number of images
numImages = numel(imageFiles);

% Initialize the matrix to store the centered image vectors
imageData = zeros(numImages, prod(commonSize));

for i = 1:numImages
    img = imread(fullfile(imageFolderPath, imageFiles(i).name));
    
    % Convert the resized image to grayscale
    grayScale = im2gray(img);

    % Resize the image to the common size
    resizedImg = imresize(grayScale, commonSize);
   
    % Vectorize the grayscale image and store in the matrix
    imgVector = double(resizedImg(:));
   
    imageData(i, :) = reshape(imgVector, 1, []);
end

% Compute the mean face vector
meanFaceVector = mean(imageData);

% Save the meanFaceVector to a .mat file
save('TrainingSet.mat', 'TrainingSet');

% Subtract the mean face vector from each vector
centeredImageData = imageData - meanFaceVector;

% Built-in pca function
[eigenVectors] = pca(centeredImageData);

featureVector = eigenVectors(:, 1:15);

% Assuming commonSize = [400, 400]
eigenfaceSize = [400, 400];

% Create a structure to organize eigenfaces
% TrainingSet = struct();

% Reshape and display the first 10 eigenfaces
for i = 1:15
    eigenface = reshape(featureVector(:, i), eigenfaceSize);
    subplot(3, 5, i);
    imshow(eigenface, []);
    title(['Eigenface ', num2str(i)]);
    % TrainingSet.(['Eigenface_', num2str(i)]) = eigenface;
end

% % Save the structure to a .mat file
% save('TrainingSet.mat', 'TrainingSet');

end
